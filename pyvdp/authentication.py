"""This module implements authentication logic for Visa APIs.

VISA APIs support two authentication mechanisms:

1. Mutual SSL authentication, based on X.509 certificates and private keys;
2. Token-based authentication, based on cryptographic signing of message exchange.

The specific mechanism depends on the API and defined by `auth_method` argument to Dispatcher. This argument is 
required and does not have a default value. Possible values are:

* **ssl** - for SSL-based authentication.
* **token** - for token-based authentication.

SSL-based authentication mechanism is implemented by :func:`pyvdp.authentication.SslAuth` class, token-based
authentication is implemented by :func:`pyvdp.authentication.TokenAuth` class.
"""
import hashlib
import hmac
import time

from pyvdp import configuration


def get_auth(auth_method, **kwargs):
    """This function exposes API for selection of authenticaton mechanism.

    :param str auth_method: **Required**. API authentication method. Possible values are: **ssl** for ssl-based 
        authentication, **token** for token-based authentication.
    :param kwargs: **Conditional**. Token computation segments. See :func:`~pyvdp.authentication.TokenAuth`.
    :return: dictionary with authentication details.
    :rtype: dict
    """
    config = configuration.get_config()

    if auth_method == 'ssl':
        klass = SslAuth(config)
    elif auth_method == 'token':
        klass = TokenAuth(config, **kwargs)
    else:
        raise PyvdpAuthError("Invalid authentication method. auth_method must be 'ssl' or 'token'."
                             "See 'Authentication' chapter in docs for details.")

    return klass.get_auth()


class SslAuth(object):
    """This class implements logic for ssl-based authentication.
    
    SSL-based authentication requires that client presents his credentials, including certificate, that can be 
    validated by server.
     
    This method requires following configuration parameters:
     
    ..  code:: ini
     
        username = my_application_username
        password = my_application_password
        key = relative_path_to_keyfile
        cert = relative_path_to_certificate_file
        
    Username and password are generated on VISA side and are available in your application dashboard.
    Certificate and key can be generated by VISA or can be generated on client side and submitted via CSR mechanism.
    The location of certificate and keyfile are relative to a path, where configuration file is located. Certificate
    and keyfile must be in base-64 PEM format.

    ..  warning::
    
        While generation of certificate and private key on VISA side may sound as a convenient method, it is not 
        recommended to use this method for production applications. For security reasons, private key MUST be generated
        locally and certificate request MUST be submitted to certificate authority using Certificate Statement Request
        (CSR) mechanism.
    """
    PARAMS = ['username', 'password', 'key', 'cert']

    def __init__(self, config):
        for param in self.PARAMS:
            if param not in config:
                raise configuration.PyvdpConfigurationError("Missing configuration parameter: %s." % param)

        self._username = config['username']
        self._password = config['password']
        self._key = config['key']
        self._cert = config['cert']

    def get_auth(self):
        auth = {
            'session': {
                'cert': (
                    self._cert,
                    self._key
                )
            },
            'request': {
                'auth': (
                    self._username,
                    self._password
                )
            },
            'headers': {}
        }
        return auth


class TokenAuth(object):
    """This class implements logic for token-based authentication.
    
    Resulting dictionary has headers key which contains a dictionary with X-PAY-TOKEN key and value for authentication
    token. Authentication token is computed based on shared_secret configuration value and message payload + timestamp.
    Essentially this is a cryptographic signatures, which is verified on VISA side through shared_secret value.
    
    Following configuration parameters are required in order to use token-based authentication:
    
    ..  code:: ini
    
        shared_secret = 'secret'
        api_key = 'myapikey'
        
    This values are generated when corresponding API is added to your application in VDP dashboard.
    """
    PARAMS = ['shared_secret', 'api_key']

    def __init__(self, config, **kwargs):
        for param in self.PARAMS:
            if param not in config:
                raise configuration.PyvdpConfigurationError("Missing configuration parameter: %s." % param)

        self._secret = config['shared_secret']
        self._api_key = config['api_key']

        self._x_pay_token = self._get_x_pay_token(**kwargs)

    def get_auth(self):
        auth = {
            'session': {},
            'request': {},
            'headers': {
                'X-PAY-TOKEN': self._x_pay_token
            }
        }
        return auth

    def _get_x_pay_token(self, **kwargs):
        """Generates payload for X-PAY-TOKEN header (token-based authentication).
        
        https://developer.visa.com/vdpguide#authentication

        :return: X-PAY-TOKEN value
        """
        ts = str(int(time.time()))

        resource_path = "%s/%s/%s/%s" % (kwargs['url'], kwargs['api'], kwargs['version'], kwargs['method'])

        if 'query_string' in kwargs and kwargs['query_string']:
            query_string = "?apikey=%s&%s" % (self._api_key, kwargs['query_string'])
        else:
            query_string = "?apikey=%s" % self._api_key

        message = "%s%s%s%s" % (ts, resource_path, query_string, kwargs['data'])

        digest = hmac.new(str.encode(self._secret), msg=str.encode(message), digestmod=hashlib.sha256).hexdigest()

        return "xv2:%s:%s" % (ts, digest)


class PyvdpAuthError(Exception):
    """This class implements error handling for authentication errors.
    
    This kind of error is raised when invalid value for `auth_method` argument is passed.
    """
    def __init__(self, message):
        self.message = message

    def __str__(self):
        return self.message
